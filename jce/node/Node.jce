#include "NodeDescriptor.jce"
#include "../registry/RegistryDescriptor.jce"
module taf
{

    interface Node
    {

        /**
        * 销毁指定服务
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int 0成功 其它失败
        */
        int destroyServer(string application,string serverName, out string result);

        /**
        * patch指定服务
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @param appDistrib  在patch server 上的app目录
        * @param shutdown  是否要求服务状态为disactive
        * @return  int 0成功 其它失败
        */
        int patch(string application, string serverName, bool shutDown,string patchServer, out string result);


        /**
        * patch指定文件路径
        * @param srcFile        文件或者路径在patch服务器上的目录
        * @param dstFile        文件或者路径在node服务器上存放的目录
        * @param patchServer    patch服务器
        * @return  int 0成功 其它失败
        */
        int patchSubborn(string patchServer, string application, string serverName, string srcFile, string dstFile, out string result);

        /**
        * 下载指定文件
        * @param application  服务所属应用名
        * @param serverName   服务名
        * @param file         文件名
        * @param out result   失败说明
        * @return  int 0成功  非0失败
        */
        
        int addFile(string application, string serverName, string file,out string result);
        
        /**
        * 获取node名称
        * @return  string
        */
        string getName();

        /**
        * 获取node上负载
        * @return  LoadInfo
        */
        LoadInfo getLoad();

        /**
        * 关闭node
        * @return  int
        */
        int shutdown(out string result);
        
        /**
        * 关闭node上所有服务
        * @return  int
        */
        int stopAllServers(out string result);

        /**
        * 载入指定服务
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */
        int loadServer(string application, string serverName, out string result);

        /**
        * 启动指定服务
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */
        int startServer(string application,string serverName, out string result);

        /**
        * 停止指定服务
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */ 
        int stopServer(string application,string serverName, out string result);

        /**
        * 通知服务
        * @return int
        */
        int notifyServer(string application, string serverName, string command, out string result);

        /**
        *  获取指定服务pid进程号
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */
        int getServerPid(string application,string serverName, out string result);

        /**
        * 获取指定服务registry设置的状态
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */
        ServerState getSettingState(string application,string serverName, out string result);

        /**
        * 获取指定服务状态
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  ServerState
        */
        ServerState getState(string application,string serverName, out string result);
        
        /**
        * 同步服务状态
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @return  int
        */
        int synState(string application,string serverName, out string result);

        /**
        * 发布服务进度
        * @param application  服务所属应用名
        * @param serverName  服务名
        * @out tPatchInfo下载信息
        * @return  int
        */
        int getPatchPercent(string application,string serverName,out PatchInfo tPatchInfo);

         /**
         * 设置服务类型
         * @param application  服务所属应用名
         * @param serverName  服务名
         * @param typeinfo    服务类型名字
         * @return  int
         */
         int setServerType(string application, string serverName, string typeinfo);
     };

};

