// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Node.jce'
// **********************************************************************

#ifndef __NODE_H_
#define __NODE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "NodeDescriptor.h"
#include "RegistryDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{

    /* callback of async proxy for client */
    class NodePrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~NodePrxCallback(){}
        virtual void callback_destroyServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_destroyServer() overloading incorrect."); }
        virtual void callback_destroyServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_destroyServer_exception() overloading incorrect."); }

        virtual void callback_patch(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_patch() overloading incorrect."); }
        virtual void callback_patch_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_patch_exception() overloading incorrect."); }

        virtual void callback_patchSubborn(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_patchSubborn() overloading incorrect."); }
        virtual void callback_patchSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_patchSubborn_exception() overloading incorrect."); }

        virtual void callback_addFile(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_addFile() overloading incorrect."); }
        virtual void callback_addFile_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_addFile_exception() overloading incorrect."); }

        virtual void callback_getName(const std::string& ret)
        { throw std::runtime_error("callback_getName() overloading incorrect."); }
        virtual void callback_getName_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getName_exception() overloading incorrect."); }

        virtual void callback_getLoad(const taf::LoadInfo& ret)
        { throw std::runtime_error("callback_getLoad() overloading incorrect."); }
        virtual void callback_getLoad_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getLoad_exception() overloading incorrect."); }

        virtual void callback_shutdown(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_shutdown() overloading incorrect."); }
        virtual void callback_shutdown_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_shutdown_exception() overloading incorrect."); }

        virtual void callback_stopAllServers(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_stopAllServers() overloading incorrect."); }
        virtual void callback_stopAllServers_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_stopAllServers_exception() overloading incorrect."); }

        virtual void callback_loadServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_loadServer() overloading incorrect."); }
        virtual void callback_loadServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadServer_exception() overloading incorrect."); }

        virtual void callback_startServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_startServer() overloading incorrect."); }
        virtual void callback_startServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_startServer_exception() overloading incorrect."); }

        virtual void callback_stopServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_stopServer() overloading incorrect."); }
        virtual void callback_stopServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_stopServer_exception() overloading incorrect."); }

        virtual void callback_notifyServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_notifyServer() overloading incorrect."); }
        virtual void callback_notifyServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_notifyServer_exception() overloading incorrect."); }

        virtual void callback_getServerPid(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_getServerPid() overloading incorrect."); }
        virtual void callback_getServerPid_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getServerPid_exception() overloading incorrect."); }

        virtual void callback_getSettingState(taf::ServerState ret,  const std::string& result)
        { throw std::runtime_error("callback_getSettingState() overloading incorrect."); }
        virtual void callback_getSettingState_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSettingState_exception() overloading incorrect."); }

        virtual void callback_getState(taf::ServerState ret,  const std::string& result)
        { throw std::runtime_error("callback_getState() overloading incorrect."); }
        virtual void callback_getState_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getState_exception() overloading incorrect."); }

        virtual void callback_synState(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_synState() overloading incorrect."); }
        virtual void callback_synState_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_synState_exception() overloading incorrect."); }

        virtual void callback_getPatchPercent(taf::Int32 ret,  const taf::PatchInfo& tPatchInfo)
        { throw std::runtime_error("callback_getPatchPercent() overloading incorrect."); }
        virtual void callback_getPatchPercent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getPatchPercent_exception() overloading incorrect."); }

        virtual void callback_setServerType(taf::Int32 ret)
        { throw std::runtime_error("callback_setServerType() overloading incorrect."); }
        virtual void callback_setServerType_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setServerType_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<NodePrxCallback> NodePrxCallbackPtr;

    /* proxy for client */
    class NodeProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 destroyServer(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_destroyServer(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 patch(const std::string & application,const std::string & serverName,taf::Bool shutDown,const std::string & patchServer,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_patch(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,taf::Bool shutDown,const std::string & patchServer,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 patchSubborn(const std::string & patchServer,const std::string & application,const std::string & serverName,const std::string & srcFile,const std::string & dstFile,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_patchSubborn(NodePrxCallbackPtr callback,const std::string & patchServer,const std::string & application,const std::string & serverName,const std::string & srcFile,const std::string & dstFile,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 addFile(const std::string & application,const std::string & serverName,const std::string & file,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_addFile(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & file,const map<string, string> &context = TAF_CONTEXT());

        std::string getName(const map<string, string> &context = TAF_CONTEXT());
        void async_getName(NodePrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::LoadInfo getLoad(const map<string, string> &context = TAF_CONTEXT());
        void async_getLoad(NodePrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 shutdown(std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_shutdown(NodePrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 stopAllServers(std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_stopAllServers(NodePrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadServer(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_loadServer(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 startServer(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_startServer(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 stopServer(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_stopServer(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 notifyServer(const std::string & application,const std::string & serverName,const std::string & command,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_notifyServer(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & command,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getServerPid(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getServerPid(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::ServerState getSettingState(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getSettingState(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::ServerState getState(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getState(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 synState(const std::string & application,const std::string & serverName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_synState(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getPatchPercent(const std::string & application,const std::string & serverName,taf::PatchInfo &tPatchInfo,const map<string, string> &context = TAF_CONTEXT());
        void async_getPatchPercent(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 setServerType(const std::string & application,const std::string & serverName,const std::string & typeinfo,const map<string, string> &context = TAF_CONTEXT());
        void async_setServerType(NodePrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & typeinfo,const map<string, string> &context = TAF_CONTEXT());

        NodeProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<NodeProxy> NodePrx;

    /* servant for server */
    class Node : public taf::Servant
    {
    public:
        virtual ~Node(){}
        virtual taf::Int32 destroyServer(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_destroyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 patch(const std::string & application,const std::string & serverName,taf::Bool shutDown,const std::string & patchServer,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_patch(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 patchSubborn(const std::string & patchServer,const std::string & application,const std::string & serverName,const std::string & srcFile,const std::string & dstFile,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_patchSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 addFile(const std::string & application,const std::string & serverName,const std::string & file,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_addFile(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual std::string getName(taf::JceCurrentPtr current) = 0;
        static void async_response_getName(taf::JceCurrentPtr current, const std::string &_ret);

        virtual taf::LoadInfo getLoad(taf::JceCurrentPtr current) = 0;
        static void async_response_getLoad(taf::JceCurrentPtr current, const taf::LoadInfo &_ret);

        virtual taf::Int32 shutdown(std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_shutdown(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 stopAllServers(std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_stopAllServers(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 loadServer(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_loadServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 startServer(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_startServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 stopServer(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_stopServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 notifyServer(const std::string & application,const std::string & serverName,const std::string & command,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_notifyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 getServerPid(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getServerPid(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::ServerState getSettingState(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getSettingState(taf::JceCurrentPtr current, taf::ServerState _ret, const std::string &result);

        virtual taf::ServerState getState(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getState(taf::JceCurrentPtr current, taf::ServerState _ret, const std::string &result);

        virtual taf::Int32 synState(const std::string & application,const std::string & serverName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_synState(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 getPatchPercent(const std::string & application,const std::string & serverName,taf::PatchInfo &tPatchInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_getPatchPercent(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::PatchInfo &tPatchInfo);

        virtual taf::Int32 setServerType(const std::string & application,const std::string & serverName,const std::string & typeinfo,taf::JceCurrentPtr current) = 0;
        static void async_response_setServerType(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
