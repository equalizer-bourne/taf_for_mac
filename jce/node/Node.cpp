// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Node.jce'
// **********************************************************************

#include "Node.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace taf
{

    taf::Int32 NodeProxy::addFile(const std::string &application, const std::string &serverName, const std::string &file, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(file, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"addFile", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void Node::async_response_addFile(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_addFile(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &file,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(file, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"addFile", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::destroyServer(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"destroyServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_destroyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_destroyServer(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"destroyServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::LoadInfo NodeProxy::getLoad(const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getLoad", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::LoadInfo _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Node::async_response_getLoad(taf::JceCurrentPtr current, const taf::LoadInfo &_ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getLoad(NodePrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getLoad", _os.getByteBuffer(), context, status, callback);
    }

    std::string NodeProxy::getName(const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getName", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        std::string _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Node::async_response_getName(taf::JceCurrentPtr current, const std::string &_ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getName(NodePrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getName", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::getPatchPercent(const std::string &application, const std::string &serverName, taf::PatchInfo &tPatchInfo, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(tPatchInfo, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getPatchPercent", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tPatchInfo, 3, true);
        return _ret;
    }

    void Node::async_response_getPatchPercent(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::PatchInfo &tPatchInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tPatchInfo", tPatchInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tPatchInfo, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getPatchPercent(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getPatchPercent", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::getServerPid(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getServerPid", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_getServerPid(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getServerPid(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getServerPid", _os.getByteBuffer(), context, status, callback);
    }

    taf::ServerState NodeProxy::getSettingState(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getSettingState", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::ServerState _ret;
        _is.read((taf::Int32&)_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_getSettingState(taf::JceCurrentPtr current, taf::ServerState _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", (taf::Int32)_ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write((taf::Int32)_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getSettingState(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getSettingState", _os.getByteBuffer(), context, status, callback);
    }

    taf::ServerState NodeProxy::getState(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getState", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::ServerState _ret;
        _is.read((taf::Int32&)_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_getState(taf::JceCurrentPtr current, taf::ServerState _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", (taf::Int32)_ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write((taf::Int32)_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_getState(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getState", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::loadServer(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"loadServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_loadServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_loadServer(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"loadServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::notifyServer(const std::string &application, const std::string &serverName, const std::string &command, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(command, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void Node::async_response_notifyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_notifyServer(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &command,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(command, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::patch(const std::string &application, const std::string &serverName, taf::Bool shutDown, const std::string &patchServer, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(shutDown, 3);
        _os.write(patchServer, 4);
        _os.write(result, 5);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"patch", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 5, true);
        return _ret;
    }

    void Node::async_response_patch(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 5);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_patch(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,taf::Bool shutDown,const std::string &patchServer,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(shutDown, 3);
        _os.write(patchServer, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"patch", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::patchSubborn(const std::string &patchServer, const std::string &application, const std::string &serverName, const std::string &srcFile, const std::string &dstFile, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(patchServer, 1);
        _os.write(application, 2);
        _os.write(serverName, 3);
        _os.write(srcFile, 4);
        _os.write(dstFile, 5);
        _os.write(result, 6);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"patchSubborn", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 6, true);
        return _ret;
    }

    void Node::async_response_patchSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 6);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_patchSubborn(NodePrxCallbackPtr callback,const std::string &patchServer,const std::string &application,const std::string &serverName,const std::string &srcFile,const std::string &dstFile,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(patchServer, 1);
        _os.write(application, 2);
        _os.write(serverName, 3);
        _os.write(srcFile, 4);
        _os.write(dstFile, 5);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"patchSubborn", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::setServerType(const std::string &application, const std::string &serverName, const std::string &typeinfo, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(typeinfo, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"setServerType", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Node::async_response_setServerType(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_setServerType(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &typeinfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(typeinfo, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"setServerType", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::shutdown(std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(result, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"shutdown", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 1, true);
        return _ret;
    }

    void Node::async_response_shutdown(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_shutdown(NodePrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"shutdown", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::startServer(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"startServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_startServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_startServer(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"startServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::stopAllServers(std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(result, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"stopAllServers", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 1, true);
        return _ret;
    }

    void Node::async_response_stopAllServers(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_stopAllServers(NodePrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"stopAllServers", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::stopServer(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"stopServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_stopServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_stopServer(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"stopServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 NodeProxy::synState(const std::string &application, const std::string &serverName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"synState", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void Node::async_response_synState(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void NodeProxy::async_synState(NodePrxCallbackPtr callback,const std::string &application,const std::string &serverName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"synState", _os.getByteBuffer(), context, status, callback);
    }

    NodeProxy* NodeProxy::taf_hash(int64_t key)
    {
        return (NodeProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __taf__Node_all[]=
    {
        "addFile",
        "destroyServer",
        "getLoad",
        "getName",
        "getPatchPercent",
        "getServerPid",
        "getSettingState",
        "getState",
        "loadServer",
        "notifyServer",
        "patch",
        "patchSubborn",
        "setServerType",
        "shutdown",
        "startServer",
        "stopAllServers",
        "stopServer",
        "synState"
    };

    int NodePrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Node_all, __taf__Node_all+18, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Node_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_addFile_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_addFile(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_destroyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_destroyServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getLoad_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::LoadInfo _ret;
                _is.read(_ret, 0, true);

                callback_getLoad(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getName_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                std::string _ret;
                _is.read(_ret, 0, true);

                callback_getName(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getPatchPercent_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::PatchInfo tPatchInfo;
                _is.read(tPatchInfo, 3, true);
                callback_getPatchPercent(_ret, tPatchInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getServerPid_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_getServerPid(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getSettingState_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::ServerState _ret;
                _is.read((taf::Int32&)_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_getSettingState(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getState_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::ServerState _ret;
                _is.read((taf::Int32&)_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_getState(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_loadServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_notifyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_notifyServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_patch_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 5, true);
                callback_patch(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_patchSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 6, true);
                callback_patchSubborn(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_setServerType_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_setServerType(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_shutdown_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 1, true);
                callback_shutdown(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_startServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_startServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_stopAllServers_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 1, true);
                callback_stopAllServers(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_stopServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_stopServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 17:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_synState_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 3, true);
                callback_synState(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int Node::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__Node_all, __taf__Node_all+18, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Node_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string file;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("file", file);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(file, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = addFile(application,serverName,file,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = destroyServer(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                }
                else
                {
                }
                taf::LoadInfo _ret = getLoad(_current);                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                }
                else
                {
                }
                std::string _ret = getName(_current);                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                taf::PatchInfo tPatchInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("tPatchInfo", tPatchInfo, tPatchInfo);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(tPatchInfo, 3, false);
                }
                taf::Int32 _ret = getPatchPercent(application,serverName,tPatchInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tPatchInfo", tPatchInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tPatchInfo, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = getServerPid(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::ServerState _ret = getSettingState(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", (taf::Int32)_ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write((taf::Int32)_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::ServerState _ret = getState(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", (taf::Int32)_ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write((taf::Int32)_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = loadServer(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string command;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("command", command);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(command, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = notifyServer(application,serverName,command,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                taf::Bool shutDown;
                std::string patchServer;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("shutDown", shutDown);
                    tafAttr.get("patchServer", patchServer);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(shutDown, 3, true);
                    _is.read(patchServer, 4, true);
                    _is.read(result, 5, false);
                }
                taf::Int32 _ret = patch(application,serverName,shutDown,patchServer,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 5);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string patchServer;
                std::string application;
                std::string serverName;
                std::string srcFile;
                std::string dstFile;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("patchServer", patchServer);
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("srcFile", srcFile);
                    tafAttr.get("dstFile", dstFile);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(patchServer, 1, true);
                    _is.read(application, 2, true);
                    _is.read(serverName, 3, true);
                    _is.read(srcFile, 4, true);
                    _is.read(dstFile, 5, true);
                    _is.read(result, 6, false);
                }
                taf::Int32 _ret = patchSubborn(patchServer,application,serverName,srcFile,dstFile,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 6);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string typeinfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("typeinfo", typeinfo);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(typeinfo, 3, true);
                }
                taf::Int32 _ret = setServerType(application,serverName,typeinfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(result, 1, false);
                }
                taf::Int32 _ret = shutdown(result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = startServer(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(result, 1, false);
                }
                taf::Int32 _ret = stopAllServers(result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = stopServer(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 17:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = synState(application,serverName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}

