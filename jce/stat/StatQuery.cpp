// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `StatQuery.jce'
// **********************************************************************

#include "StatQuery.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace taf
{

    taf::Int32 StatQueryProxy::query(const taf::StatQueryKey &tKey, taf::Bool bMaster, taf::StatQueryValue &tValue, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tKey, 1);
        _os.write(bMaster, 2);
        _os.write(tValue, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"query", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tValue, 3, true);
        return _ret;
    }

    void StatQuery::async_response_query(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::StatQueryValue &tValue)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tValue", tValue);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tValue, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void StatQueryProxy::async_query(StatQueryPrxCallbackPtr callback,const taf::StatQueryKey &tKey,taf::Bool bMaster,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tKey, 1);
        _os.write(bMaster, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"query", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 StatQueryProxy::queryDbInf(const std::string &sModule, taf::Db &tDb, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sModule, 1);
        _os.write(tDb, 2);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"queryDbInf", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tDb, 2, true);
        return _ret;
    }

    void StatQuery::async_response_queryDbInf(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::Db &tDb)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tDb", tDb);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tDb, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void StatQueryProxy::async_queryDbInf(StatQueryPrxCallbackPtr callback,const std::string &sModule,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sModule, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"queryDbInf", _os.getByteBuffer(), context, status, callback);
    }

    StatQueryProxy* StatQueryProxy::taf_hash(int64_t key)
    {
        return (StatQueryProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __taf__StatQuery_all[]=
    {
        "query",
        "queryDbInf"
    };

    int StatQueryPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__StatQuery_all, __taf__StatQuery_all+2, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatQuery_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_query_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::StatQueryValue tValue;
                _is.read(tValue, 3, true);
                callback_query(_ret, tValue);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_queryDbInf_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::Db tDb;
                _is.read(tDb, 2, true);
                callback_queryDbInf(_ret, tDb);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int StatQuery::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__StatQuery_all, __taf__StatQuery_all+2, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatQuery_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::StatQueryKey tKey;
                taf::Bool bMaster;
                taf::StatQueryValue tValue;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tKey", tKey);
                    tafAttr.get("bMaster", bMaster);
                    tafAttr.getByDefault("tValue", tValue, tValue);
                }
                else
                {
                    _is.read(tKey, 1, true);
                    _is.read(bMaster, 2, true);
                    _is.read(tValue, 3, false);
                }
                taf::Int32 _ret = query(tKey,bMaster,tValue, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tValue", tValue);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tValue, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string sModule;
                taf::Db tDb;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("sModule", sModule);
                    tafAttr.getByDefault("tDb", tDb, tDb);
                }
                else
                {
                    _is.read(sModule, 1, true);
                    _is.read(tDb, 2, false);
                }
                taf::Int32 _ret = queryDbInf(sModule,tDb, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tDb", tDb);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tDb, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}

