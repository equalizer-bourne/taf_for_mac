// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `AdminReg.jce'
// **********************************************************************

#include "AdminReg.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace taf
{

    vector<std::string> AdminRegProxy::getAllApplicationNames(std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(result, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getAllApplicationNames", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        vector<std::string> _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 1, true);
        return _ret;
    }

    void AdminReg::async_response_getAllApplicationNames(taf::JceCurrentPtr current, const vector<std::string> &_ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getAllApplicationNames(AdminRegPrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getAllApplicationNames", _os.getByteBuffer(), context, status, callback);
    }

    vector<std::string> AdminRegProxy::getAllNodeNames(std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(result, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getAllNodeNames", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        vector<std::string> _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 1, true);
        return _ret;
    }

    void AdminReg::async_response_getAllNodeNames(taf::JceCurrentPtr current, const vector<std::string> &_ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getAllNodeNames(AdminRegPrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getAllNodeNames", _os.getByteBuffer(), context, status, callback);
    }

    vector<vector<std::string> > AdminRegProxy::getAllServerIds(std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(result, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getAllServerIds", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        vector<vector<std::string> > _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 1, true);
        return _ret;
    }

    void AdminReg::async_response_getAllServerIds(taf::JceCurrentPtr current, const vector<vector<std::string> > &_ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getAllServerIds(AdminRegPrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getAllServerIds", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getGroupId(const std::string &ip, taf::Int32 &groupId, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(ip, 1);
        _os.write(groupId, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getGroupId", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(groupId, 2, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void AdminReg::async_response_getGroupId(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 groupId, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("groupId", groupId);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(groupId, 2);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getGroupId(AdminRegPrxCallbackPtr callback,const std::string &ip,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(ip, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getGroupId", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getNodeVesion(const std::string &name, std::string &version, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        _os.write(version, 2);
        _os.write(result, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getNodeVesion", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(version, 2, true);
        _is.read(result, 3, true);
        return _ret;
    }

    void AdminReg::async_response_getNodeVesion(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &version, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("version", version);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(version, 2);

            _os.write(result, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getNodeVesion(AdminRegPrxCallbackPtr callback,const std::string &name,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getNodeVesion", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getPatchPercent(const std::string &application, const std::string &serverName, const std::string &nodeName, taf::PatchInfo &tPatchInfo, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(tPatchInfo, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getPatchPercent", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tPatchInfo, 4, true);
        return _ret;
    }

    void AdminReg::async_response_getPatchPercent(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::PatchInfo &tPatchInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tPatchInfo", tPatchInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tPatchInfo, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getPatchPercent(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getPatchPercent", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getProfileTemplate(const std::string &profileName, std::string &profileTemplate, std::string &resultDesc, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(profileName, 1);
        _os.write(profileTemplate, 2);
        _os.write(resultDesc, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getProfileTemplate", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(profileTemplate, 2, true);
        _is.read(resultDesc, 3, true);
        return _ret;
    }

    void AdminReg::async_response_getProfileTemplate(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &profileTemplate, const std::string &resultDesc)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("profileTemplate", profileTemplate);
            tafAttr.put("resultDesc", resultDesc);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(profileTemplate, 2);

            _os.write(resultDesc, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getProfileTemplate(AdminRegPrxCallbackPtr callback,const std::string &profileName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(profileName, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getProfileTemplate", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getServerProfileTemplate(const std::string &application, const std::string &serverName, const std::string &nodeName, std::string &profileTemplate, std::string &resultDesc, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(profileTemplate, 4);
        _os.write(resultDesc, 5);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getServerProfileTemplate", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(profileTemplate, 4, true);
        _is.read(resultDesc, 5, true);
        return _ret;
    }

    void AdminReg::async_response_getServerProfileTemplate(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &profileTemplate, const std::string &resultDesc)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("profileTemplate", profileTemplate);
            tafAttr.put("resultDesc", resultDesc);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(profileTemplate, 4);

            _os.write(resultDesc, 5);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getServerProfileTemplate(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getServerProfileTemplate", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::getServerState(const std::string &application, const std::string &serverName, const std::string &nodeName, taf::ServerStateDesc &state, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(state, 4);
        _os.write(result, 5);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"getServerState", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(state, 4, true);
        _is.read(result, 5, true);
        return _ret;
    }

    void AdminReg::async_response_getServerState(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::ServerStateDesc &state, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("state", state);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(state, 4);

            _os.write(result, 5);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_getServerState(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"getServerState", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::loadServer(const std::string &application, const std::string &serverName, const std::string &nodeName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"loadServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void AdminReg::async_response_loadServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_loadServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"loadServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::notifyServer(const std::string &application, const std::string &serverName, const std::string &nodeName, const std::string &command, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(command, 4);
        _os.write(result, 5);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 5, true);
        return _ret;
    }

    void AdminReg::async_response_notifyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 5);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_notifyServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const std::string &command,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(command, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::patchServer(const std::string &application, const std::string &serverName, const std::string &nodeName, taf::Bool shutdown, const std::string &version, const std::string &user, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(shutdown, 4);
        _os.write(version, 5);
        _os.write(user, 6);
        _os.write(result, 7);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"patchServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 7, true);
        return _ret;
    }

    void AdminReg::async_response_patchServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 7);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_patchServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,taf::Bool shutdown,const std::string &version,const std::string &user,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(shutdown, 4);
        _os.write(version, 5);
        _os.write(user, 6);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"patchServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::patchSubborn(const std::string &application, const std::string &serverName, const std::string &nodeName, const std::string &sSrcFile, const std::string &sDstFile, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(sSrcFile, 4);
        _os.write(sDstFile, 5);
        _os.write(result, 6);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"patchSubborn", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 6, true);
        return _ret;
    }

    void AdminReg::async_response_patchSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 6);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_patchSubborn(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const std::string &sSrcFile,const std::string &sDstFile,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(sSrcFile, 4);
        _os.write(sDstFile, 5);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"patchSubborn", _os.getByteBuffer(), context, status, callback);
    }

    taf::Bool AdminRegProxy::pingNode(const std::string &name, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        _os.write(result, 2);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"pingNode", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Bool _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 2, true);
        return _ret;
    }

    void AdminReg::async_response_pingNode(taf::JceCurrentPtr current, taf::Bool _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_pingNode(AdminRegPrxCallbackPtr callback,const std::string &name,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"pingNode", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::restartServer(const std::string &application, const std::string &serverName, const std::string &nodeName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"restartServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void AdminReg::async_response_restartServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_restartServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"restartServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::shutdownNode(const std::string &name, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        _os.write(result, 2);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"shutdownNode", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 2, true);
        return _ret;
    }

    void AdminReg::async_response_shutdownNode(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_shutdownNode(AdminRegPrxCallbackPtr callback,const std::string &name,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(name, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"shutdownNode", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::startServer(const std::string &application, const std::string &serverName, const std::string &nodeName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"startServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void AdminReg::async_response_startServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_startServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"startServer", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 AdminRegProxy::stopServer(const std::string &application, const std::string &serverName, const std::string &nodeName, std::string &result, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"stopServer", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    void AdminReg::async_response_stopServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void AdminRegProxy::async_stopServer(AdminRegPrxCallbackPtr callback,const std::string &application,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"stopServer", _os.getByteBuffer(), context, status, callback);
    }

    AdminRegProxy* AdminRegProxy::taf_hash(int64_t key)
    {
        return (AdminRegProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __taf__AdminReg_all[]=
    {
        "getAllApplicationNames",
        "getAllNodeNames",
        "getAllServerIds",
        "getGroupId",
        "getNodeVesion",
        "getPatchPercent",
        "getProfileTemplate",
        "getServerProfileTemplate",
        "getServerState",
        "loadServer",
        "notifyServer",
        "patchServer",
        "patchSubborn",
        "pingNode",
        "restartServer",
        "shutdownNode",
        "startServer",
        "stopServer"
    };

    int AdminRegPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__AdminReg_all, __taf__AdminReg_all+18, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__AdminReg_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getAllApplicationNames_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<std::string> _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 1, true);
                callback_getAllApplicationNames(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getAllNodeNames_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<std::string> _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 1, true);
                callback_getAllNodeNames(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getAllServerIds_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<vector<std::string> > _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 1, true);
                callback_getAllServerIds(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getGroupId_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::Int32 groupId;
                _is.read(groupId, 2, true);
                std::string result;
                _is.read(result, 3, true);
                callback_getGroupId(_ret, groupId, result);
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNodeVesion_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string version;
                _is.read(version, 2, true);
                std::string result;
                _is.read(result, 3, true);
                callback_getNodeVesion(_ret, version, result);
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getPatchPercent_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::PatchInfo tPatchInfo;
                _is.read(tPatchInfo, 4, true);
                callback_getPatchPercent(_ret, tPatchInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getProfileTemplate_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string profileTemplate;
                _is.read(profileTemplate, 2, true);
                std::string resultDesc;
                _is.read(resultDesc, 3, true);
                callback_getProfileTemplate(_ret, profileTemplate, resultDesc);
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getServerProfileTemplate_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string profileTemplate;
                _is.read(profileTemplate, 4, true);
                std::string resultDesc;
                _is.read(resultDesc, 5, true);
                callback_getServerProfileTemplate(_ret, profileTemplate, resultDesc);
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getServerState_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::ServerStateDesc state;
                _is.read(state, 4, true);
                std::string result;
                _is.read(result, 5, true);
                callback_getServerState(_ret, state, result);
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_loadServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_notifyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 5, true);
                callback_notifyServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_patchServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 7, true);
                callback_patchServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_patchSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 6, true);
                callback_patchSubborn(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_pingNode_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Bool _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 2, true);
                callback_pingNode(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_restartServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_restartServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_shutdownNode_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 2, true);
                callback_shutdownNode(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_startServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_startServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
            case 17:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_stopServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                callback_stopServer(_ret, result);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int AdminReg::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__AdminReg_all, __taf__AdminReg_all+18, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__AdminReg_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(result, 1, false);
                }
                vector<std::string> _ret = getAllApplicationNames(result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(result, 1, false);
                }
                vector<std::string> _ret = getAllNodeNames(result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(result, 1, false);
                }
                vector<vector<std::string> > _ret = getAllServerIds(result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string ip;
                taf::Int32 groupId;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("ip", ip);
                    tafAttr.getByDefault("groupId", groupId, groupId);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(ip, 1, true);
                    _is.read(groupId, 2, false);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = getGroupId(ip,groupId,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("groupId", groupId);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(groupId, 2);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string name;
                std::string version;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("name", name);
                    tafAttr.getByDefault("version", version, version);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(name, 1, true);
                    _is.read(version, 2, false);
                    _is.read(result, 3, false);
                }
                taf::Int32 _ret = getNodeVesion(name,version,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("version", version);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(version, 2);
                        _os.write(result, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                taf::PatchInfo tPatchInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("tPatchInfo", tPatchInfo, tPatchInfo);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(tPatchInfo, 4, false);
                }
                taf::Int32 _ret = getPatchPercent(application,serverName,nodeName,tPatchInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tPatchInfo", tPatchInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tPatchInfo, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string profileName;
                std::string profileTemplate;
                std::string resultDesc;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("profileName", profileName);
                    tafAttr.getByDefault("profileTemplate", profileTemplate, profileTemplate);
                    tafAttr.getByDefault("resultDesc", resultDesc, resultDesc);
                }
                else
                {
                    _is.read(profileName, 1, true);
                    _is.read(profileTemplate, 2, false);
                    _is.read(resultDesc, 3, false);
                }
                taf::Int32 _ret = getProfileTemplate(profileName,profileTemplate,resultDesc, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("profileTemplate", profileTemplate);
                        tafAttr.put("resultDesc", resultDesc);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(profileTemplate, 2);
                        _os.write(resultDesc, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string profileTemplate;
                std::string resultDesc;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("profileTemplate", profileTemplate, profileTemplate);
                    tafAttr.getByDefault("resultDesc", resultDesc, resultDesc);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(profileTemplate, 4, false);
                    _is.read(resultDesc, 5, false);
                }
                taf::Int32 _ret = getServerProfileTemplate(application,serverName,nodeName,profileTemplate,resultDesc, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("profileTemplate", profileTemplate);
                        tafAttr.put("resultDesc", resultDesc);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(profileTemplate, 4);
                        _os.write(resultDesc, 5);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                taf::ServerStateDesc state;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("state", state, state);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(state, 4, false);
                    _is.read(result, 5, false);
                }
                taf::Int32 _ret = getServerState(application,serverName,nodeName,state,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("state", state);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(state, 4);
                        _os.write(result, 5);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = loadServer(application,serverName,nodeName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string command;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.get("command", command);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(command, 4, true);
                    _is.read(result, 5, false);
                }
                taf::Int32 _ret = notifyServer(application,serverName,nodeName,command,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 5);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                taf::Bool shutdown;
                std::string version;
                std::string user;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.get("shutdown", shutdown);
                    tafAttr.get("version", version);
                    tafAttr.get("user", user);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(shutdown, 4, true);
                    _is.read(version, 5, true);
                    _is.read(user, 6, true);
                    _is.read(result, 7, false);
                }
                taf::Int32 _ret = patchServer(application,serverName,nodeName,shutdown,version,user,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 7);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string sSrcFile;
                std::string sDstFile;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.get("sSrcFile", sSrcFile);
                    tafAttr.get("sDstFile", sDstFile);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(sSrcFile, 4, true);
                    _is.read(sDstFile, 5, true);
                    _is.read(result, 6, false);
                }
                taf::Int32 _ret = patchSubborn(application,serverName,nodeName,sSrcFile,sDstFile,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 6);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string name;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("name", name);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(name, 1, true);
                    _is.read(result, 2, false);
                }
                taf::Bool _ret = pingNode(name,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = restartServer(application,serverName,nodeName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string name;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("name", name);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(name, 1, true);
                    _is.read(result, 2, false);
                }
                taf::Int32 _ret = shutdownNode(name,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = startServer(application,serverName,nodeName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 17:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string application;
                std::string serverName;
                std::string nodeName;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("application", application);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("nodeName", nodeName);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(application, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(nodeName, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = stopServer(application,serverName,nodeName,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}

