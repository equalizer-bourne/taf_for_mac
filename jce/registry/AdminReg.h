// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `AdminReg.jce'
// **********************************************************************

#ifndef __ADMINREG_H_
#define __ADMINREG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "NodeDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{
    struct ServerStateDesc : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ServerStateDesc";
        }
        static string MD5()
        {
            return "095448ef2251676e72ff615e097b7337";
        }
        ServerStateDesc()
        :settingStateInReg(""),presentStateInReg(""),presentStateInNode(""),processId(0),patchVersion(""),patchTime(""),patchUser("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(settingStateInReg, 0);
            _os.write(presentStateInReg, 1);
            _os.write(presentStateInNode, 2);
            _os.write(processId, 3);
            _os.write(patchVersion, 4);
            _os.write(patchTime, 5);
            _os.write(patchUser, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(settingStateInReg, 0, true);
            _is.read(presentStateInReg, 1, true);
            _is.read(presentStateInNode, 2, true);
            _is.read(processId, 3, true);
            _is.read(patchVersion, 4, true);
            _is.read(patchTime, 5, true);
            _is.read(patchUser, 6, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(settingStateInReg,"settingStateInReg");
            _ds.display(presentStateInReg,"presentStateInReg");
            _ds.display(presentStateInNode,"presentStateInNode");
            _ds.display(processId,"processId");
            _ds.display(patchVersion,"patchVersion");
            _ds.display(patchTime,"patchTime");
            _ds.display(patchUser,"patchUser");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(settingStateInReg, true);
            _ds.displaySimple(presentStateInReg, true);
            _ds.displaySimple(presentStateInNode, true);
            _ds.displaySimple(processId, true);
            _ds.displaySimple(patchVersion, true);
            _ds.displaySimple(patchTime, true);
            _ds.displaySimple(patchUser, false);
            return _os;
        }
    public:
        std::string settingStateInReg;
        std::string presentStateInReg;
        std::string presentStateInNode;
        taf::Int32 processId;
        std::string patchVersion;
        std::string patchTime;
        std::string patchUser;
    };
    inline bool operator==(const ServerStateDesc&l, const ServerStateDesc&r)
    {
        return l.settingStateInReg == r.settingStateInReg && l.presentStateInReg == r.presentStateInReg && l.presentStateInNode == r.presentStateInNode && l.processId == r.processId && l.patchVersion == r.patchVersion && l.patchTime == r.patchTime && l.patchUser == r.patchUser;
    }
    inline bool operator!=(const ServerStateDesc&l, const ServerStateDesc&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class AdminRegPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~AdminRegPrxCallback(){}
        virtual void callback_getAllApplicationNames(const vector<std::string>& ret,  const std::string& result)
        { throw std::runtime_error("callback_getAllApplicationNames() overloading incorrect."); }
        virtual void callback_getAllApplicationNames_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getAllApplicationNames_exception() overloading incorrect."); }

        virtual void callback_getAllNodeNames(const vector<std::string>& ret,  const std::string& result)
        { throw std::runtime_error("callback_getAllNodeNames() overloading incorrect."); }
        virtual void callback_getAllNodeNames_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getAllNodeNames_exception() overloading incorrect."); }

        virtual void callback_pingNode(taf::Bool ret,  const std::string& result)
        { throw std::runtime_error("callback_pingNode() overloading incorrect."); }
        virtual void callback_pingNode_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pingNode_exception() overloading incorrect."); }

        virtual void callback_getNodeVesion(taf::Int32 ret,  const std::string& version,  const std::string& result)
        { throw std::runtime_error("callback_getNodeVesion() overloading incorrect."); }
        virtual void callback_getNodeVesion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNodeVesion_exception() overloading incorrect."); }

        virtual void callback_shutdownNode(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_shutdownNode() overloading incorrect."); }
        virtual void callback_shutdownNode_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_shutdownNode_exception() overloading incorrect."); }

        virtual void callback_getAllServerIds(const vector<vector<std::string> >& ret,  const std::string& result)
        { throw std::runtime_error("callback_getAllServerIds() overloading incorrect."); }
        virtual void callback_getAllServerIds_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getAllServerIds_exception() overloading incorrect."); }

        virtual void callback_getServerState(taf::Int32 ret,  const taf::ServerStateDesc& state,  const std::string& result)
        { throw std::runtime_error("callback_getServerState() overloading incorrect."); }
        virtual void callback_getServerState_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getServerState_exception() overloading incorrect."); }

        virtual void callback_getGroupId(taf::Int32 ret, taf::Int32 groupId,  const std::string& result)
        { throw std::runtime_error("callback_getGroupId() overloading incorrect."); }
        virtual void callback_getGroupId_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getGroupId_exception() overloading incorrect."); }

        virtual void callback_startServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_startServer() overloading incorrect."); }
        virtual void callback_startServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_startServer_exception() overloading incorrect."); }

        virtual void callback_stopServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_stopServer() overloading incorrect."); }
        virtual void callback_stopServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_stopServer_exception() overloading incorrect."); }

        virtual void callback_restartServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_restartServer() overloading incorrect."); }
        virtual void callback_restartServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_restartServer_exception() overloading incorrect."); }

        virtual void callback_notifyServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_notifyServer() overloading incorrect."); }
        virtual void callback_notifyServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_notifyServer_exception() overloading incorrect."); }

        virtual void callback_patchServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_patchServer() overloading incorrect."); }
        virtual void callback_patchServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_patchServer_exception() overloading incorrect."); }

        virtual void callback_patchSubborn(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_patchSubborn() overloading incorrect."); }
        virtual void callback_patchSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_patchSubborn_exception() overloading incorrect."); }

        virtual void callback_getPatchPercent(taf::Int32 ret,  const taf::PatchInfo& tPatchInfo)
        { throw std::runtime_error("callback_getPatchPercent() overloading incorrect."); }
        virtual void callback_getPatchPercent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getPatchPercent_exception() overloading incorrect."); }

        virtual void callback_loadServer(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_loadServer() overloading incorrect."); }
        virtual void callback_loadServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadServer_exception() overloading incorrect."); }

        virtual void callback_getProfileTemplate(taf::Int32 ret,  const std::string& profileTemplate,  const std::string& resultDesc)
        { throw std::runtime_error("callback_getProfileTemplate() overloading incorrect."); }
        virtual void callback_getProfileTemplate_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getProfileTemplate_exception() overloading incorrect."); }

        virtual void callback_getServerProfileTemplate(taf::Int32 ret,  const std::string& profileTemplate,  const std::string& resultDesc)
        { throw std::runtime_error("callback_getServerProfileTemplate() overloading incorrect."); }
        virtual void callback_getServerProfileTemplate_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getServerProfileTemplate_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<AdminRegPrxCallback> AdminRegPrxCallbackPtr;

    /* proxy for client */
    class AdminRegProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        vector<std::string> getAllApplicationNames(std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getAllApplicationNames(AdminRegPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        vector<std::string> getAllNodeNames(std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getAllNodeNames(AdminRegPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Bool pingNode(const std::string & name,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_pingNode(AdminRegPrxCallbackPtr callback,const std::string & name,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getNodeVesion(const std::string & name,std::string &version,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getNodeVesion(AdminRegPrxCallbackPtr callback,const std::string & name,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 shutdownNode(const std::string & name,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_shutdownNode(AdminRegPrxCallbackPtr callback,const std::string & name,const map<string, string> &context = TAF_CONTEXT());

        vector<vector<std::string> > getAllServerIds(std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getAllServerIds(AdminRegPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getServerState(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::ServerStateDesc &state,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getServerState(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getGroupId(const std::string & ip,taf::Int32 &groupId,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_getGroupId(AdminRegPrxCallbackPtr callback,const std::string & ip,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 startServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_startServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 stopServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_stopServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 restartServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_restartServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 notifyServer(const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & command,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_notifyServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & command,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 patchServer(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::Bool shutdown,const std::string & version,const std::string & user,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_patchServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,taf::Bool shutdown,const std::string & version,const std::string & user,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 patchSubborn(const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & sSrcFile,const std::string & sDstFile,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_patchSubborn(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & sSrcFile,const std::string & sDstFile,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getPatchPercent(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::PatchInfo &tPatchInfo,const map<string, string> &context = TAF_CONTEXT());
        void async_getPatchPercent(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_loadServer(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getProfileTemplate(const std::string & profileName,std::string &profileTemplate,std::string &resultDesc,const map<string, string> &context = TAF_CONTEXT());
        void async_getProfileTemplate(AdminRegPrxCallbackPtr callback,const std::string & profileName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getServerProfileTemplate(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &profileTemplate,std::string &resultDesc,const map<string, string> &context = TAF_CONTEXT());
        void async_getServerProfileTemplate(AdminRegPrxCallbackPtr callback,const std::string & application,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TAF_CONTEXT());

        AdminRegProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<AdminRegProxy> AdminRegPrx;

    /* servant for server */
    class AdminReg : public taf::Servant
    {
    public:
        virtual ~AdminReg(){}
        virtual vector<std::string> getAllApplicationNames(std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getAllApplicationNames(taf::JceCurrentPtr current, const vector<std::string> &_ret, const std::string &result);

        virtual vector<std::string> getAllNodeNames(std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getAllNodeNames(taf::JceCurrentPtr current, const vector<std::string> &_ret, const std::string &result);

        virtual taf::Bool pingNode(const std::string & name,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_pingNode(taf::JceCurrentPtr current, taf::Bool _ret, const std::string &result);

        virtual taf::Int32 getNodeVesion(const std::string & name,std::string &version,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getNodeVesion(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &version, const std::string &result);

        virtual taf::Int32 shutdownNode(const std::string & name,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_shutdownNode(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual vector<vector<std::string> > getAllServerIds(std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getAllServerIds(taf::JceCurrentPtr current, const vector<vector<std::string> > &_ret, const std::string &result);

        virtual taf::Int32 getServerState(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::ServerStateDesc &state,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getServerState(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::ServerStateDesc &state, const std::string &result);

        virtual taf::Int32 getGroupId(const std::string & ip,taf::Int32 &groupId,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_getGroupId(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 groupId, const std::string &result);

        virtual taf::Int32 startServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_startServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 stopServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_stopServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 restartServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_restartServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 notifyServer(const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & command,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_notifyServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 patchServer(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::Bool shutdown,const std::string & version,const std::string & user,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_patchServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 patchSubborn(const std::string & application,const std::string & serverName,const std::string & nodeName,const std::string & sSrcFile,const std::string & sDstFile,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_patchSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 getPatchPercent(const std::string & application,const std::string & serverName,const std::string & nodeName,taf::PatchInfo &tPatchInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_getPatchPercent(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::PatchInfo &tPatchInfo);

        virtual taf::Int32 loadServer(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_loadServer(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 getProfileTemplate(const std::string & profileName,std::string &profileTemplate,std::string &resultDesc,taf::JceCurrentPtr current) = 0;
        static void async_response_getProfileTemplate(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &profileTemplate, const std::string &resultDesc);

        virtual taf::Int32 getServerProfileTemplate(const std::string & application,const std::string & serverName,const std::string & nodeName,std::string &profileTemplate,std::string &resultDesc,taf::JceCurrentPtr current) = 0;
        static void async_response_getServerProfileTemplate(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &profileTemplate, const std::string &resultDesc);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define taf_ServerStateDesc_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.settingStateInReg,b.settingStateInReg);jce_copy_struct(a.presentStateInReg,b.presentStateInReg);jce_copy_struct(a.presentStateInNode,b.presentStateInNode);jce_copy_struct(a.processId,b.processId);jce_copy_struct(a.patchVersion,b.patchVersion);jce_copy_struct(a.patchTime,b.patchTime);jce_copy_struct(a.patchUser,b.patchUser);



#endif
