// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.1.7 by WSRD Tencent.
// Generated from `UserInfo.jce'
// **********************************************************************

#ifndef __USERINFO_H_
#define __USERINFO_H_

#include <map>
#include <string>
#include <vector>
#include "Jce.h"
using namespace std;


namespace Test
{
    struct FriendInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "test.FriendInfo";
        }
        static string MD5()
        {
            return "45fe926863e3dc21a26704a3d7d47a10";
        }
        FriendInfo()
        : uin(0),nick("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uin, 1);
            _os.write(nick, 2);
            _os.write(birthday, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(uin, 1, true);
            _is.read(nick, 2, true);
            _is.read(birthday, 3, false);
        }
    public:
        taf::Int32 uin;
        std::string nick;
        vector<taf::Char> birthday;
    };
    inline bool operator==(const FriendInfo&l, const FriendInfo&r)
    {
        return l.uin == r.uin && l.nick == r.nick && l.birthday == r.birthday;
    }
    inline bool operator!=(const FriendInfo&l, const FriendInfo&r)
    {
        return !(l == r);
    }

    struct UserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "test.UserInfo";
        }
        static string MD5()
        {
            return "6593b7f251ba7485a5e928146a5f1dad";
        }
        UserInfo()
        : qq(0),nick(""),city("gd")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(qq, 1);
            _os.write(nick, 2);
            _os.write(birthday, 3);
            _os.write(city, 4);
            _os.write(friends, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(qq, 1, true);
            _is.read(nick, 2, true);
            _is.read(birthday, 3, true);
            _is.read(city, 4, false);
            _is.read(friends, 5, true);
        }
    public:
        taf::Int32 qq;
        std::string nick;
        vector<taf::Char> birthday;
        std::string city;
        map<taf::Short, Test::FriendInfo> friends;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.qq == r.qq && l.nick == r.nick && l.birthday == r.birthday && l.city == r.city && l.friends == r.friends;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }
}
#endif
