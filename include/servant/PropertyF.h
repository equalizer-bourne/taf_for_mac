// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `PropertyF.jce'
// **********************************************************************

#ifndef __PROPERTYF_H_
#define __PROPERTYF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{
    struct StatPropMsgHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropMsgHead";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        StatPropMsgHead()
        :moduleName(""),ip(""),propertyName("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(moduleName, 0);
            _os.write(ip, 1);
            _os.write(propertyName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(moduleName, 0, true);
            _is.read(ip, 1, true);
            _is.read(propertyName, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(moduleName,"moduleName");
            _ds.display(ip,"ip");
            _ds.display(propertyName,"propertyName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(moduleName, true);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(propertyName, false);
            return _os;
        }
    public:
        std::string moduleName;
        std::string ip;
        std::string propertyName;
    };
    inline bool operator==(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return l.moduleName == r.moduleName && l.ip == r.ip && l.propertyName == r.propertyName;
    }
    inline bool operator!=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(l == r);
    }
    inline bool operator<(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        if(l.moduleName != r.moduleName)  return (l.moduleName < r.moduleName);
        if(l.ip != r.ip)  return (l.ip < r.ip);
        if(l.propertyName != r.propertyName)  return (l.propertyName < r.propertyName);
        return false;
    }
    inline bool operator<=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(r < l);
    }
    inline bool operator>(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return r < l;
    }
    inline bool operator>=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(l < r);
    }

    struct StatPropInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        StatPropInfo()
        :policy(""),value("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(policy, 0);
            _os.write(value, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(policy, 0, true);
            _is.read(value, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(policy,"policy");
            _ds.display(value,"value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(policy, true);
            _ds.displaySimple(value, false);
            return _os;
        }
    public:
        std::string policy;
        std::string value;
    };
    inline bool operator==(const StatPropInfo&l, const StatPropInfo&r)
    {
        return l.policy == r.policy && l.value == r.value;
    }
    inline bool operator!=(const StatPropInfo&l, const StatPropInfo&r)
    {
        return !(l == r);
    }

    struct StatPropMsgBody : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropMsgBody";
        }
        static string MD5()
        {
            return "f105a140519677cba2956f19804f41b9";
        }
        StatPropMsgBody()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(vInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vInfo,"vInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vInfo, false);
            return _os;
        }
    public:
        vector<taf::StatPropInfo> vInfo;
    };
    inline bool operator==(const StatPropMsgBody&l, const StatPropMsgBody&r)
    {
        return l.vInfo == r.vInfo;
    }
    inline bool operator!=(const StatPropMsgBody&l, const StatPropMsgBody&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class PropertyFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PropertyFPrxCallback(){}
        virtual void callback_reportPropMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportPropMsg() overloading incorrect."); }
        virtual void callback_reportPropMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportPropMsg_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PropertyFPrxCallback> PropertyFPrxCallbackPtr;

    /* proxy for client */
    class PropertyFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());
        void async_reportPropMsg(PropertyFPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());

        PropertyFProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<PropertyFProxy> PropertyFPrx;

    /* servant for server */
    class PropertyF : public taf::Servant
    {
    public:
        virtual ~PropertyF(){}
        virtual taf::Int32 reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,taf::JceCurrentPtr current) = 0;
        static void async_response_reportPropMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define taf_StatPropMsgHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.moduleName,b.moduleName);jce_copy_struct(a.ip,b.ip);jce_copy_struct(a.propertyName,b.propertyName);

#define taf_StatPropInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.policy,b.policy);jce_copy_struct(a.value,b.value);

#define taf_StatPropMsgBody_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vInfo,b.vInfo);



#endif
