// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `NodeF.jce'
// **********************************************************************

#ifndef __NODEF_H_
#define __NODEF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{
    struct ServerInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ServerInfo";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        ServerInfo()
        :application(""),serverName(""),pid(0),adapter("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(application, 0);
            _os.write(serverName, 1);
            _os.write(pid, 2);
            _os.write(adapter, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(application, 0, true);
            _is.read(serverName, 1, true);
            _is.read(pid, 2, true);
            _is.read(adapter, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(application,"application");
            _ds.display(serverName,"serverName");
            _ds.display(pid,"pid");
            _ds.display(adapter,"adapter");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(application, true);
            _ds.displaySimple(serverName, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(adapter, false);
            return _os;
        }
    public:
        std::string application;
        std::string serverName;
        taf::Int32 pid;
        std::string adapter;
    };
    inline bool operator==(const ServerInfo&l, const ServerInfo&r)
    {
        return l.application == r.application && l.serverName == r.serverName && l.pid == r.pid && l.adapter == r.adapter;
    }
    inline bool operator!=(const ServerInfo&l, const ServerInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class ServerFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallback(){}
        virtual void callback_keepAlive(taf::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() overloading incorrect."); }
        virtual void callback_keepAlive_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() overloading incorrect."); }

        virtual void callback_reportVersion(taf::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() overloading incorrect."); }
        virtual void callback_reportVersion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ServerFPrxCallback> ServerFPrxCallbackPtr;

    /* proxy for client */
    class ServerFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 keepAlive(const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT());
        void async_keepAlive(ServerFPrxCallbackPtr callback,const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT());
        void async_reportVersion(ServerFPrxCallbackPtr callback,const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT());

        ServerFProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<ServerFProxy> ServerFPrx;

    /* servant for server */
    class ServerF : public taf::Servant
    {
    public:
        virtual ~ServerF(){}
        virtual taf::Int32 keepAlive(const taf::ServerInfo & serverInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_keepAlive(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,taf::JceCurrentPtr current) = 0;
        static void async_response_reportVersion(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define taf_ServerInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.application,b.application);jce_copy_struct(a.serverName,b.serverName);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.adapter,b.adapter);



#endif
