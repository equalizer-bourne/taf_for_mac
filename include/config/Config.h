// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Config.jce'
// **********************************************************************

#ifndef __CONFIG_H_
#define __CONFIG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{

    /* callback of async proxy for client */
    class ConfigPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallback(){}
        virtual void callback_ListConfig(taf::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfig() overloading incorrect."); }
        virtual void callback_ListConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_ListConfig_exception() overloading incorrect."); }

        virtual void callback_loadConfig(taf::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfig() overloading incorrect."); }
        virtual void callback_loadConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadConfig_exception() overloading incorrect."); }

        virtual void callback_loadConfigByHost(taf::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByHost() overloading incorrect."); }
        virtual void callback_loadConfigByHost_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByHost_exception() overloading incorrect."); }

        virtual void callback_checkConfig(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfig() overloading incorrect."); }
        virtual void callback_checkConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_checkConfig_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ConfigPrxCallback> ConfigPrxCallbackPtr;

    /* proxy for client */
    class ConfigProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,const map<string, string> &context = TAF_CONTEXT());
        void async_ListConfig(ConfigPrxCallbackPtr callback,const std::string & app,const std::string & server,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,const map<string, string> &context = TAF_CONTEXT());
        void async_loadConfig(ConfigPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & filename,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,const map<string, string> &context = TAF_CONTEXT());
        void async_loadConfigByHost(ConfigPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_checkConfig(ConfigPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        ConfigProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<ConfigProxy> ConfigPrx;

    /* servant for server */
    class Config : public taf::Servant
    {
    public:
        virtual ~Config(){}
        virtual taf::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_ListConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf);

        virtual taf::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,taf::JceCurrentPtr current) = 0;
        static void async_response_loadConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config);

        virtual taf::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,taf::JceCurrentPtr current) = 0;
        static void async_response_loadConfigByHost(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config);

        virtual taf::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_checkConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
