// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `QueryF.jce'
// **********************************************************************

#include "servant/QueryF.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace taf
{

    vector<taf::EndpointF> QueryFProxy::findObjectById(const std::string &id, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        vector<taf::EndpointF> _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void QueryF::async_response_findObjectById(taf::JceCurrentPtr current, const vector<taf::EndpointF> &_ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QueryFProxy::async_findObjectById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 QueryFProxy::findObjectById4All(const std::string &id, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(activeEp, 2);
        _os.write(inactiveEp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 2, true);
        _is.read(inactiveEp, 3, true);
        return _ret;
    }

    void QueryF::async_response_findObjectById4All(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 2);

            _os.write(inactiveEp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QueryFProxy::async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 QueryFProxy::findObjectByIdInSameGroup(const std::string &id, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(activeEp, 2);
        _os.write(inactiveEp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 2, true);
        _is.read(inactiveEp, 3, true);
        return _ret;
    }

    void QueryF::async_response_findObjectByIdInSameGroup(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 2);

            _os.write(inactiveEp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QueryFProxy::async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 QueryFProxy::findObjectByIdInSameStation(const std::string &id, const std::string &sStation, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        _os.write(activeEp, 3);
        _os.write(inactiveEp, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 3, true);
        _is.read(inactiveEp, 4, true);
        return _ret;
    }

    void QueryF::async_response_findObjectByIdInSameStation(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 3);

            _os.write(inactiveEp, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QueryFProxy::async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, status, callback);
    }

    QueryFProxy* QueryFProxy::taf_hash(int64_t key)
    {
        return (QueryFProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __taf__QueryF_all[]=
    {
        "findObjectById",
        "findObjectById4All",
        "findObjectByIdInSameGroup",
        "findObjectByIdInSameStation"
    };

    int QueryFPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+4, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<taf::EndpointF> _ret;
                _is.read(_ret, 0, true);

                callback_findObjectById(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4All_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                callback_findObjectById4All(_ret, activeEp, inactiveEp);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 3, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 4, true);
                callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int QueryF::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+4, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                }
                else
                {
                    _is.read(id, 1, true);
                }
                vector<taf::EndpointF> _ret = findObjectById(id, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(activeEp, 2, false);
                    _is.read(inactiveEp, 3, false);
                }
                taf::Int32 _ret = findObjectById4All(id,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 2);
                        _os.write(inactiveEp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(activeEp, 2, false);
                    _is.read(inactiveEp, 3, false);
                }
                taf::Int32 _ret = findObjectByIdInSameGroup(id,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 2);
                        _os.write(inactiveEp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                std::string sStation;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.get("sStation", sStation);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(sStation, 2, true);
                    _is.read(activeEp, 3, false);
                    _is.read(inactiveEp, 4, false);
                }
                taf::Int32 _ret = findObjectByIdInSameStation(id,sStation,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 3);
                        _os.write(inactiveEp, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}

