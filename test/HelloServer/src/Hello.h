// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.3.1 by WSRD Tencent.
// Generated from `Hello.jce'
// **********************************************************************

#ifndef __HELLO_H_
#define __HELLO_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace Test
{

    /* callback of async proxy for client */
    class HelloPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~HelloPrxCallback(){}
        virtual void callback_testHello(taf::Int32 ret,  const std::string& r)
        { throw std::runtime_error("callback_testHello() overloading incorrect."); }
        virtual void callback_testHello_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_testHello_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<HelloPrxCallback> HelloPrxCallbackPtr;

    /* proxy for client */
    class HelloProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 testHello(const std::string & s,std::string &r,const map<string, string> &context = TAF_CONTEXT());
        void async_testHello(HelloPrxCallbackPtr callback,const std::string & s,const map<string, string> &context = TAF_CONTEXT());

        HelloProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<HelloProxy> HelloPrx;

    /* servant for server */
    class Hello : public taf::Servant
    {
    public:
        virtual ~Hello(){}
        virtual taf::Int32 testHello(const std::string & s,std::string &r,taf::JceCurrentPtr current) = 0;
        static void async_response_testHello(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &r);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
