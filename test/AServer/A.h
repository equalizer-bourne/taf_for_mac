// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `A.jce'
// **********************************************************************

#ifndef __A_H_
#define __A_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace Test
{

    /* callback of async proxy for client */
    class APrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~APrxCallback(){}
        virtual void callback_test(const std::string& ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<APrxCallback> APrxCallbackPtr;

    /* proxy for client */
    class AProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        std::string test(taf::Int64 p,taf::Int32 i,const map<string, string> &context = TAF_CONTEXT());
        void async_test(APrxCallbackPtr callback,taf::Int64 p,taf::Int32 i,const map<string, string> &context = TAF_CONTEXT());

        AProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<AProxy> APrx;

    /* servant for server */
    class A : public taf::Servant
    {
    public:
        virtual ~A(){}
        virtual std::string test(taf::Int64 p,taf::Int32 i,taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, const std::string &_ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
